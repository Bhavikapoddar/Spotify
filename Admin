hiiiii
...... 
............. 
// Inside AdminController.cs

public ActionResult AdminPanel()
{
    // Retrieve all flights from the database
    var allFlights = db.Flight.ToList();

    // Group flights by RouteId and count them
    var flightCountsByRoute = allFlights
        .GroupBy(f => f.RouteId)
        .Select(g => new
        {
            RouteId = g.Key,
            FlightCount = g.Count()
        })
        .ToList();

    // Get the route information (From and To locations)
    var allRoutes = db.SearchRequest.ToList();

    // Combine the flight counts with the route details
    var flightStatistics = from count in flightCountsByRoute
                           join route in allRoutes on count.RouteId equals route.RouteId
                           select new FlightStatisticViewModel
                           {
                               RouteName = $"{route.FromLocation} to {route.Tolocation}",
                               FlightCount = count.FlightCount
                           };

    // Pass the data to the view using ViewBag
    ViewBag.FlightStatistics = flightStatistics;

    return View();
}

// You'll need to create this ViewModel class to hold the data
public class FlightStatisticViewModel
{
    public string RouteName { get; set; }
    public int FlightCount { get; set; }
}

. ....... 
.... 
@{
    ViewBag.Title = "Admin Panel";
    var flightStatistics = ViewBag.FlightStatistics as IEnumerable<Airline_Managementnew.Controllers.FlightStatisticViewModel>;
}

<div class="main-content">
    <h2>Welcome to Admin Panel!</h2>
    <p>Use the left menu to manage routes, flights, and passengers efficiently.</p>

    <div class="statistics-container">
        <h3>Flights per Route Statistics</h3>
        <div class="graph-container">
            <div class="y-axis">
                @for (int i = 15; i >= 0; i -= 3)
                {
                    <div class="y-label">@i</div>
                }
            </div>
            <div class="bars-container">
                @if (flightStatistics != null && flightStatistics.Any())
                {
                    // Find the max flight count to scale the bars
                    var maxCount = flightStatistics.Max(s => s.FlightCount);
                    foreach (var stat in flightStatistics)
                    {
                        // Calculate the height of the bar based on the max count
                        var barHeight = (int)Math.Round((double)stat.FlightCount / maxCount * 100);
                        
                        <div class="bar-wrapper">
                            <div class="bar" style="height: @(barHeight)%">
                                <div class="tooltip">@stat.FlightCount flights</div>
                            </div>
                            <div class="x-label">@stat.RouteName</div>
                        </div>
                    }
                }
                else
                {
                    <p>No flight data available to display.</p>
                }
            </div>
        </div>
        <div class="x-axis-label">Routes</div>
    </div>
</div>

<style>
    /* Styling for the statistics graph */
    .statistics-container {
        border: 1px solid #ccc;
        padding: 20px;
        margin-top: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
    }

    .statistics-container h3 {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    .graph-container {
        display: table; /* Using table for layout since flexbox is not reliable */
        width: 100%;
        height: 300px; /* Fixed height for the graph area */
        position: relative;
    }
    
    .y-axis {
        display: table-cell;
        width: 40px;
        vertical-align: bottom;
        text-align: right;
        padding-right: 5px;
        height: 100%;
        position: relative;
    }
    
    .y-label {
        height: 20%; /* 5 labels, so 20% each */
        position: relative;
        border-bottom: 1px dashed #ccc;
        line-height: 0;
    }
    
    .y-label:first-child {
        border-bottom: none;
    }
    
    .y-label::after {
        content: attr(data-value);
        position: absolute;
        top: 50%;
        right: 5px;
        transform: translateY(-50%);
        font-size: 12px;
        color: #555;
    }

    .bars-container {
        display: table-cell;
        vertical-align: bottom;
        height: 100%;
        white-space: nowrap; /* Prevents bars from wrapping */
        overflow-x: auto;
    }
    
    .bar-wrapper {
        display: inline-block;
        width: 15%; /* Adjust this based on how many bars you have */
        height: 100%;
        text-align: center;
        margin: 0 2%;
        position: relative;
        vertical-align: bottom;
    }

    .bar {
        background-color: #3f51b5; /* Blue color for the bar */
        width: 60%;
        margin: 0 auto;
        position: absolute;
        bottom: 0;
        left: 20%;
        transition: all 0.3s ease;
        border-radius: 4px 4px 0 0;
    }

    .bar:hover {
        background-color: #303f9f;
        cursor: pointer;
    }

    .x-label {
        position: absolute;
        bottom: -20px;
        left: 0;
        right: 0;
        font-size: 12px;
        color: #555;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Tooltip styling */
    .tooltip {
        position: absolute;
        top: -30px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 5px 8px;
        border-radius: 5px;
        white-space: nowrap;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease;
    }

    .bar:hover .tooltip {
        opacity: 1;
    }
</style>

<script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
<script>
    // You can add more complex logic here if needed,
    // for example, to dynamically change colors or handle clicks.
    $(document).ready(function () {
        // Example: Change bar color on click (optional)
        $('.bar').on('click', function () {
            // You can implement an AJAX call here to get details for the clicked route
            // For now, let's just log to the console
            var routeName = $(this).siblings('.x-label').text();
            console.log('Clicked on route:', routeName);
        });
    });
</script>
