@model Hotel1.Models.Customer
@{
    ViewBag.Title = "Create Customer";
}

<h2>Create New Customer</h2>

@using (Html.BeginForm("Create", "Customer", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div style="width: 500px; padding: 20px; border: 1px solid #ccc; border-radius: 10px;">
        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.Name)
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control", style = "width:100%;", required = "required" })
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.Gender)
            @Html.DropDownListFor(model => model.Gender, (SelectList)ViewBag.GenderList, "Select Gender", new { @class = "form-control", style = "width:100%;" })
            @Html.ValidationMessageFor(model => model.Gender)
        </div>

        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.Phone)
            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", style = "width:100%;", type = "tel", pattern = "[0-9]{10}", maxlength = "10", required = "required" })
            @Html.ValidationMessageFor(model => model.Phone)
        </div>

        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.Email)
            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", style = "width:100%;", type = "email", required = "required" })
            @Html.ValidationMessageFor(model => model.Email)
        </div>

        <div style="margin-bottom: 15px;">
            @Html.Label("Upload ID Proof (Photo)")
            <input type="file" name="IDProof" accept="image/*" class="form-control" style="width:100%;" required />
        </div>

        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.NoOfPeople)
            @Html.TextBoxFor(model => model.NoOfPeople, new { @class = "form-control", style = "width:100%;", type = "number", min = "1", required = "required" })
            @Html.ValidationMessageFor(model => model.NoOfPeople)
        </div>

        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.PaymentStatus)
            @Html.DropDownListFor(model => model.PaymentStatus, (SelectList)ViewBag.PaymentStatusList, "Select Payment Status", new { @class = "form-control", style = "width:100%;" })
            @Html.ValidationMessageFor(model => model.PaymentStatus)
        </div>

        <div style="margin-bottom: 15px;">
            @Html.LabelFor(model => model.CurrentBill)
            @Html.TextBoxFor(model => model.CurrentBill, new { @class = "form-control", style = "width:100%;", type = "number", min = "0", step = "0.01", required = "required" })
            @Html.ValidationMessageFor(model => model.CurrentBill)
        </div>

        <button type="submit" class="btn btn-primary" style="width:100%;">Submit</button>
    </div>
}            {
                if (IDProofFile != null && IDProofFile.ContentLength > 0)
                {
                    string folderPath = Server.MapPath("~/Images/IdProofs/");
                    if (!Directory.Exists(folderPath))
                        Directory.CreateDirectory(folderPath);

                    string fileName = Path.GetFileName(IDProofFile.FileName);
                    string filePath = Path.Combine(folderPath, fileName);
                    IDProofFile.SaveAs(filePath);

                    customer.IDProof = fileName; // Save file name in DB
                }

                db.Customers.Add(customer);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.GenderList = new SelectList(new[] { "Male", "Female", "Other" });
            ViewBag.PaymentStatusList = new SelectList(new[] { "Paid", "Unpaid", "Pending" });
            return View(customer);
        }

        // GET: Customer/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            Customer customer = db.Customers.Find(id);
            if (customer == null)
                return HttpNotFound();

            ViewBag.GenderList = new SelectList(new[] { "Male", "Female", "Other" }, customer.Gender);
            ViewBag.PaymentStatusList = new SelectList(new[] { "Paid", "Unpaid", "Pending" }, customer.PaymentStatus);
            return View(customer);
        }

        // POST: Customer/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Customer customer, HttpPostedFileBase IDProofFile)
        {
            if (ModelState.IsValid)
            {
                if (IDProofFile != null && IDProofFile.ContentLength > 0)
                {
                    string folderPath = Server.MapPath("~/Images/IdProofs/");
                    if (!Directory.Exists(folderPath))
                        Directory.CreateDirectory(folderPath);

                    string fileName = Path.GetFileName(IDProofFile.FileName);
                    string filePath = Path.Combine(folderPath, fileName);
                    IDProofFile.SaveAs(filePath);

                    customer.IDProof = fileName;
                }

                db.Entry(customer).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.GenderList = new SelectList(new[] { "Male", "Female", "Other" }, customer.Gender);
            ViewBag.PaymentStatusList = new SelectList(new[] { "Paid", "Unpaid", "Pending" }, customer.PaymentStatus);
            return View(customer);
        }

        // GET: Customer/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            Customer customer = db.Customers.Find(id);
            if (customer == null)
                return HttpNotFound();

            return View(customer);
        }

        // POST: Customer/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Customer customer = db.Customers.Find(id);
            db.Customers.Remove(customer);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
